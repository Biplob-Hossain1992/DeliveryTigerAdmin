
@{
    ViewBag.Title = "Quick Order Process";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<script src="https://code.angularjs.org/1.2.14/angular.js"></script>
<script>
    $(document).ready(function () {
        if (sessionStorage.getItem("userId") !== null && sessionStorage.getItem("userId") !== "undefined") {
            $("#UserHidden").val(sessionStorage.getItem("userId"));
            var title = "@ViewBag.Title";
            $("#title").html(title.replace(/([A-Z])/g, ' $1').trim());
        }
        else {
            window.location.href = "/Account/Login";
        }
    });
</script>
<style>
/*    [type=radio] {
        position: absolute;
        opacity: 0;
        width: 0;
        height: 0;
    }

        [type=radio]:checked + img {
            outline: 2px solid #f00;
        }*/
</style>
<div class="row wrapper border-bottom white-bg page-heading">
    <div class="col-lg-9">
        <h2 id="title"></h2>
        <ol class="breadcrumb">
            <li class="breadcrumb-item">
                <a href="@Url.Action("Index", "Admin")">Dashboard</a>
            </li>
            <li class="breadcrumb-item active">
                <strong>@ViewBag.Title</strong>
            </li>
        </ol>
    </div>
</div>
<div ng-app="myModule">
    <div ng-controller="myController" data-ng-init="init()">
        <div class="row">
            <div class="col-md-12">
                <div class="ibox">
                    <div class="ibox-title">
                        <h5>Search Field | <small>Filtering Quick Order</small> <span class="label label-primary" ng-model="totalOrderCount" id="totalOrderCount">{{totalOrderCount}}</span></h5>
                        <div class="ibox-tools">
                            <a class="collapse-link">
                                <i class="fa fa-chevron-up"></i>
                            </a>
                        </div>
                    </div>
                    <div class="ibox-content" style="padding:5px;">
                        <div class="row">
                            <div class="col-md-6">
                                <input class="form-control" type="text" ng-model="fromDate" id="fromDate" onfocus="(this.type='date')" onblur="(this.type='text')" placeholder="From Date ..." />
                            </div>


                            <div class="col-md-6">
                                <input class="form-control" type="text" ng-model="toDate" id="toDate" onfocus="(this.type='date')" onblur="(this.type='text')" placeholder="To Date ..." />
                            </div>
                        </div>
                        <div style="height:1cm">
                        </div>
                        <div class="form-group row" style="justify-content: center">
                            <div>
                                <button type="submit" id="search" class="btn btn-success" ng-click="LoadQuickOrders(fromDate, toDate)"><strong>Load</strong></button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div id="loader">
            <div class="spiner-example" ng-show="showLoader">
                <div class="sk-spinner sk-spinner-wave">
                    <div class="sk-rect1">
                    </div>
                    <div class="sk-rect2">
                    </div>
                    <div class="sk-rect3">
                    </div>
                    <div class="sk-rect4">
                    </div>
                    <div class="sk-rect5">
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                <div class="table table-responsive" id="exportTable">
                    <table id="statusTable" class="table table-striped table-bordered statusTable" style="width: 100%" ng-show="showTable">
                        <thead>
                            <tr>
                                <th style="text-align: center;width: 30px;" class="text-lg">#</th>
                                <th style="text-align: center;" class="text-lg">Image</th>
                                <th style="text-align: center;" class="text-lg">OrderInfo</th>
                            </tr>
                        </thead>
                        <tbody id="orderBody">
                            <tr  ng-repeat="data in quickOrders"> 
                                <td style="text-align:center;">{{$index + 1}}</td>
                                <td style="text-align:center;">
                                    <h1><b>{{data.courierOrdersId}}</b></h1>
                                    <img ng-src="{{data.quickOrderImageUrl}}" width="500" height="600" />
                                </td>
                                <td>
                                    <div class="col-md-12">
                                        <div class="row form-group">
                                            <div class="col-md-2">
                                                <label class="col-md-2 col-form-label"><b>DTCode</b></label>
                                            </div>
                                            <div class="col-md-10">
                                                <input type="text" class="form-control" title="{{data.courierOrdersId}}" ng-model="data.courierOrdersId" id="courierOrdersId" value="" @*style="display:none;"*@ disabled />
                                                @*<label class="form-control"> DT-{{data.id}}</label>*@
                                            </div>
                                        </div>
                                        <div class="row form-group">
                                            <div class="col-md-2">
                                                <label class="col-md-2 col-form-label"><b>Name</b></label>
                                            </div>
                                            <div class="col-md-4">
                                                <input type="text" class="form-control" title="{{data.customerName}}" ng-model="data.customerName" id="customerName" placeholder="...Customers name" />
                                            </div>
                                            <div class="col-md-2">
                                                <label class="col-md-2 col-form-label"><b>Mobile</b></label>
                                            </div>
                                            <div class="col-md-4">
                                                <input type="text" class="form-control" title="{{data.mobile}}" ng-model="data.mobile" id="customerMobile" placeholder="...EX:01845384979 (mobile)" />
                                            </div>
                                        </div>
                                        <div class="row form-group">
                                            <div class="col-md-6">
                                                <select class="form-control" title="{{data.weightRangeId}}" ng-model="data.weightRangeId" id="productWeight" ng-options="weight.weightRangeId as weight.weight for weight in data.weightRangeInfos">
                                                    <option value="">Select Weight</option>
                                                </select>
                                            </div>
                                            <div class="col-md-6">
                                                <input type="text" class="form-control" title="{{data.otherMobile}}" ng-model="data.otherMobile" id="productName" placeholder="...Alt Mobile Number" />
                                            </div>
                                        </div>
                                        <div class="row form-group">
                                            <div class="col-md-12">
                                                <textarea title="{{data.address}}" ng-model="data.address" rows="4" cols="60" placeholder="...Customer Address"></textarea>
                                            </div>
                                        </div>
                                        <div class="row form-group">
                                            <div class="col-md-12">
                                                <textarea class="form-control" title="{{data.collectionName}}" ng-model="data.collectionName" rows="2" cols="60" placeholder="...PackageName/Customer Reference / Invoice Number"></textarea>
                                            </div>
                                        </div>
                                        <div class="row form-group">

                                            <div class="col-md-4">
                                                <select style="font-size: 12px;font-weight: 600;" class="form-control" ng-change="LoadThana(data,data.districtId)" ng-model="data.districtId" ng-options="c.districtId as c.district for c in data.districts">
                                                    <option value="">Select District</option>
                                                </select>
                                            </div>

                                            <div class="col-md-4">
                                                <select style="font-size: 12px;font-weight: 600;" class="form-control" ng-model="data.thanaId" ng-options="c.districtId as c.district for c in data.thanas"  ng-change="LoadArea(data,data.thanaId, data.districtId, data.serviceType)">
                                                    <option value="">Select Thana</option>
                                                </select>
                                            </div>

                                            <div class="col-md-4">
                                                <select style="font-size: 12px;font-weight: 600;" class="form-control" ng-model="data.areaId" ng-options="c.districtId as c.district for c in data.areas" ng-change="LoadAreawiseDeliveryRange(data,data.districtId,data.thanaId,data.areaId, data.serviceType, 1)">
                                                    <option value="">Select Area</option>
                                                </select>
                                            </div>
                                        </div>
                                        <div class="row form-group">
                                            @*<div class="col-md-6">
                                                <select class="form-control" title="{{data.deliveryRangeId}}" ng-model="data.deliveryRangeId" id="deliverRangeDropDown" ng-options="range.deliveryRangeId as range.deliveryType for range in data.deliveryRangeInfos">
                                                    <option value="">Select ServiceType</option>
                                                </select>
                                            </div>*@
                                            <div class="col-md-3">
                                                <label class="col-form-label"><b>Breakable Charge</b></label>
                                            </div>
                                            <div class="col-md-3">
                                                <input type="checkbox" class="form-control" title="Product Name" ng-model="data.breakableCharge" id="productName" placeholder="...enter Product's Name" />
                                            </div>
                                        </div>
                                        <div class="row form-group">
                                            <div class="col-md-4">
                                                <label class="col-form-label"><b>Actual Package Price</b></label>
                                            </div>
                                            <div class="col-md-8">
                                                <input type="number" class="form-control" title="{{data.actualPackagePrice}}" ng-model="data.actualPackagePrice" id="actualPackagePrice" placeholder="...Actual Package Price" />
                                            </div>
                                        </div>
                                        <div class="row form-group">
                                            <div class="col-md-2">
                                                <label class="col-form-label"><b>Collection Amount</b></label>
                                            </div>
                                            <div class="col-md-4">
                                                <input type="number" class="form-control" title="{{data.collectionAmount}}" ng-model="data.collectionAmount" id="collectionAmount" placeholder="Ex. 10" />
                                            </div>
                                            <div class="col-md-2">
                                                <label class="col-form-label"><b>Packaging Charge</b></label>
                                            </div>
                                            <div class="col-md-4">
                                                @*<input type="text" class="form-control" title="{{packagingCharge}}" ng-model="packagingCharge" id="packagingCharge" placeholder="Ex. 10" />*@
                                                <select ng-model="data.packagingName" class="form-control" ng-options="charge.packagingName as charge.packagingName for charge in packagingChargeRange">
                                                    <option value="">Select</option>
                                                </select>
                                            </div>
                                        </div>
                                        <div class="row form-group">
                                            <div ng-repeat="option in data.deliveryRangeInfos" ng-click="SelectDeliveryRange(option.deliveryRangeId,data, data.changedDeliveryRange)" style="cursor:pointer;" title="{{option.deliveryRangeId}}">
                                                @*<input type="radio" id="radio{{option.deliveryRangeId}}" name="deliveryRange" data-ng-value="{{option.deliveryRangeId}}"  ng-model="data.deliveryRangeId" ng-checked="true" />*@
                                                <img data-ng-src="{{option.onImageLink}}" width="110" height="58" ng-show="data.deliveryRangeId == option.deliveryRangeId" />
                                                <img ng-src="{{option.offImageLink}}" width="110" height="58" ng-show="data.deliveryRangeId != option.deliveryRangeId" />

                                            </div>
                                        </div>
                                        <div class="form-group row" style="justify-content: center">
                                            <div>
                                                <button type="submit" id="SubmitBtn" class="btn btn-primary" ng-click="ProcessOrder(data,data.packagingName)"><strong>Submit</strong></button>
                                            </div>
                                        </div>
                                    </div>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>

            </div>
        </div>
    </div>
</div>


<script>
    var app = angular.module('myModule', []);
    app.controller('myController', function ($scope, $http, $anchorScroll, $location) {
        $scope.totalOrderCount = 0;
        $scope.packagingCharges = -1;
        $scope.allRangeInfo = [];
        $scope.PackagingCharge = [
            {
                'PackagingCharge': -1,
                'PackagingName': 'Select for BreakCharge'
            },
            {
                'PackagingCharge': 0,
                'PackagingName': 'No Extra Packing'
            },
            {
                'PackagingCharge': 15,
                'PackagingName': 'Box (Tk 15)'
            },
            {
                'PackagingCharge': 5,
                'PackagingName': 'Poly(Tk 5)'
            },
            {
                'PackagingCharge': 10,
                'PackagingName': 'Bubble + Poly (Tk 10)'
            },
            {
                'PackagingCharge': 20,
                'PackagingName': 'Bubble + Box (Tk 20)'
            },
            {
                'PackagingCharge': 10,
                'PackagingName': 'Eyelish shop'
            },
            {
                'PackagingCharge': 10,
                'PackagingName': 'KhutiNati Collection '
            },
            {
                'PackagingCharge': 10,
                'PackagingName': 'Pabo dot com'
            }
        ];

        $scope.SelectDeliveryRange = (selectedRange, data,changed) => {

            if (changed == null) {
                data.changedDeliveryRange = true;
                data.previousDeliveryRange = data.paymentType
            }
            data.deliveryRangeId = selectedRange;

        }

         $scope.getPackagingChargeRange = () => {
            let url = apiBaseURL + "Fetch/GetPackagingChargeRange/true";

             $http.get(url, { headers: { 'ContentType': 'application/json;charset=utf-8', "Authorization": "Bearer " + sessionStorage.getItem("token").trim() } })
                 .then(function (response) {
                     //console.log(response);
                     $scope.packagingChargeRange = response.data.model;
                 })
        }


        $scope.init = () => {
            $scope.thanaDisabled = true;
            $scope.areaDisabled = true;
            $scope.showTable = false;
            $scope.getPackagingChargeRange();
            //$scope.LoadDeliveryRange();
            //$scope.LoadAllDistricts();
            $scope.SetDate();
            //$scope.AddWeightRange();
        }

        $scope.AddWeightRange = () => {
            $http.get(apiBaseURL + 'Fetch/GetWeightRange', { headers: { 'ContentType': 'application/json;charset=utf-8' } })
                .then(function (response) {
                    $scope.ProductWeightList = response.data.model;
                })
        }


        $scope.LoadDeliveryRange = (data, thanaId, districtId, areaId, serviceType) => {

            let obj = {
                districtId: districtId,
                thanaId: thanaId,
                areaId: areaId,
                serviceType: serviceType
            };

            $http.post(apiBaseURL + 'Fetch/DeliveryChargeDetailsAreaWise', obj, { headers: { 'ContentType': 'application/json;utf=charset-8' } })
                .then(function (response) {
                    if (response.data.model.length > 0) {
                        data.deliveryRangeInfos = response.data.model[0].weightRangeWiseData;
                        data.weightRangeInfos = response.data.model;
                        /*data.deliveryCharge = response.data.model[0].weightRangeWiseData.deliveryCharge;*/
                        $scope.allRangeInfo = response.data.model;
                    }
                    else {
                        data.deliveryRangeInfos = [];
                        data.weightRangeInfos = [];
                    }
                });
        }

        $scope.LoadAllDistricts = () => {

            ///api/Fetch / LoadAllDistrictsById / { id }
            let url = apiBaseURL + 'Fetch/LoadAllDistrictsById/' + 0;

            $http.get(url, { headers: { 'ContentType': 'application/json;utf=charset-8' } })
                .then(function (response) {
                    $scope.allDistricts = response.data.model;
                    $scope.Districts = response.data.model.filter(x => x.parentId == 0 && x.isActive == true);
                }), function error(response) {
                    alert('Error fetching Districts');
                }
        }

        $scope.LoadThana = (data, districtId) => {

            if (districtId == '0' || districtId == '' || districtId == null) {
                data.thanas = [];
                data.areas = [];
                data.deliveryRangeInfos = [];
                data.weightRangeInfos = [];
                data.thanaId = 0;
                data.areaId = 0;
            }
            else {
                $scope.ChangeServiceType(data);


                $http.get(apiBaseURL + 'Fetch/LoadAllDistrictsById/' + districtId, { headers: { 'ContentType': 'application/json;charset=utf-8' } })
                    .then(function (response) {
                        data.thanas = response.data.model;
                        data.deliveryRangeInfos = [];
                        data.areas = [];
                        data.thanaId = 0;
                        data.deliveryRangeId = 0;
                        data.areaId = 0;
                    });
            }


        }

        $scope.LoadArea = (data, thanaId, districtId, serviceType) => {
            if (thanaId == '0' || thanaId == '' || thanaId == null) {
                data.areas = [];
                data.deliveryRangeInfos = [];
                data.weightRangeInfos = [];
                data.areaId = 0;
            }
            else {
                //$scope.areaDisabled = false;
                $http.get(apiBaseURL + 'Fetch/LoadAllDistrictsById/' + thanaId, { headers: { 'ContentType': 'application/json;charset=utf-8' } })
                    .then(function (response) {
                        data.areas = response.data.model;
                        data.areaId = '';
                        $scope.LoadDeliveryRange(data, thanaId, districtId, 0, serviceType);
                    })

            }
        };

        $scope.LoadAreawiseDeliveryRange = (data, districtId, thanaId, areaId, serviceType) => {

            if (areaId == 0) {
                $scope.LoadDeliveryRange(data, thanaId, districtId, 0, serviceType);
            }
            else {
                $scope.LoadDeliveryRange(data, thanaId, districtId, areaId, serviceType);
            }
        };

        $scope.LoadQuickOrders = (fromDate, toDate) => {

            let obj = {
                fromDate: fromDate,
                toDate: toDate
            };

            //alert('inside Load Quick Order');
            console.log(obj);

            let url = apiBaseURL + 'QuickOrder/LoadQuickOrder';
            //let url = 'http://localhost:58676/api/QuickOrder/LoadQuickOrder';


            $scope.showLoader = true;
            $http.post(url, obj, { headers: { 'Content-Type': 'application/json;charset=utf-8' } })
                .then(function (response) {
                    $scope.showLoader = false;
                    if (response.data.model.length <= 0) {
                        alert('There is no Data to Show');
                        $scope.totalOrderCount = 0;
                        //document.getElementById('orderBody').innerHTML = '';
                        $scope.showTable = false;
                        return false;
                    }

                    $scope.totalOrderCount = response.data.model.length;
                    $scope.quickOrders = response.data.model;

                    //$scope.LoadAllDistricts();
                    //$scope.getDistrictName = $scope.Districts.find(x => x.districtId == $scope.quickOrders.districtId);
                    //$scope.onlyName = $scope.getDistrictName.find
                    //$scope.LoadAllDeliveryRange();
                    $scope.showTable = true;
                    $scope.gotoDiv('search');
                    //get Service Charges
                    $scope.GetBreakableCharge();


                }), function error(response) {
                    alert('Something went wrong');
                }
        }


        $scope.LoadAllDeliveryRange = () => {

            $http.get(apiBaseURL + 'Fetch/GetDeliveryRange', { headers: { 'Content-Type': 'application/json;charset=utf-8' } })
                .then(function (response) {

                    let list = [];
                    for (let i = 0; i < response.data.model.length; i++) {

                        let obj = {
                            deliveryRangeId: response.data.model[i].id,
                            deliveryType: response.data.model[i].name + response.data.model[i].day
                        }
                        list.push(obj);
                    }

                    $scope.deliveryRangeInfo = list;
                })

        }


        $scope.SetDate = () => {

            let date = new Date();
            var dd = String(date.getDate()).padStart(2, '0');
            var mm = String(date.getMonth() + 1).padStart(2, '0'); //January is 0!
            var yyyy = date.getFullYear();
            var toDate = yyyy + '-' + mm + '-' + dd;

            let days = 0; // 7 days behind current date
            var last = new Date(date.getTime() - (days * 24 * 60 * 60 * 1000));
            var day = String(last.getDate()).padStart(2, '0');
            var month = String(last.getMonth() + 1).padStart(2, '0');
            var year = last.getFullYear();
            var fromDate = year + '-' + month + '-' + day;

            $scope.fromDate = fromDate;
            $scope.toDate = toDate;

        }


        $scope.ProcessOrder = (data, packagingName) => {

            let breakableCharge = 0;
            let packagingCharge = 0;
            let codCharge = 0;
            let orderType = '';
            //error checks
            if (data.collectionName == '') {
                data.collectionName = data.mobile;
            }

            let errorList = $scope.CheckError(data, packagingName);
            if (errorList.length > 0) {
                var erros = errorList.join(',');
                alert('These Feilds can not be empty: ' + erros);
                return false;
            }

            if ($scope.allRangeInfo.length == 0) {
                $scope.GetRangeInfo(data.districtId, data.thanaId, data.areaId, data.serviceType);
            }

            $scope.weightRangeInfo = $scope.allRangeInfo.filter(x => x.weightRangeId == data.weightRangeId);
            let deliverRangeInfo = $scope.weightRangeInfo[0].weightRangeWiseData.filter(x => x.deliveryRangeId == data.deliveryRangeId)[0];

            //charge calculation
            data.deliveryCharge = deliverRangeInfo.chargeAmount;

            let weight = $scope.weightRangeInfo[0].weight;
            let paymentType = deliverRangeInfo.deliveryType + " " + deliverRangeInfo.days;
            console.log($scope.allRangeInfo);

          
            breakableCharge = data.breakableCharge == true?$scope.Charges.breakableCharge : 0;

            if (packagingName != '') {
                packagingCharge = $scope.packagingChargeRange.filter(x => x.packagingName == packagingName)[0].packagingCharge;
            }

            if (data.collectionAmount > 0) {

                if (data.districtId == 14) {
                    codCharge = data.collectionAmount * ($scope.Charges.codChargeDhakaPercentage / 100);
                }
                else {
                    codCharge = data.collectionAmount * ($scope.Charges.codChargePercentage / 100);
                }

                if (codCharge < $scope.Charges.codChargeMin) codCharge = $scope.Charges.codChargeMin;

                orderType = 'Delivery Taka Collection';
            }
            else if (data.collectionAmount <= 0) {
                orderType = 'Only Delivery';
            }


            //let packagingName = $scope.PackagingCharge.filter(x => x.PackagingCharge == charge)[0].PackagingName;
            let collectionCharge = 5; //need to verify

            let Obj = {
                courierOrdersId: data.courierOrdersId,
                customerName: data.customerName,
                mobile: data.mobile,
                weightRangeId: data.weightRangeId,
                otherMobile: data.otherMobile,
                address: data.address,
                orderType: orderType,
                codCharge: codCharge,
                collectionCharge: collectionCharge,
                paymentType: paymentType,
                weight: weight,
                actualPackagePrice: data.actualPackagePrice,
                deliveryCharge: data.deliveryCharge,
                districtid: data.districtId,
                thanaId: data.thanaId == '' ? 0 : +data.thanaId,
                areaId: data.areaId == '' ? 0 : +data.areaId,
                deliveryRangeId: data.deliveryRangeId,
                collectionName: data.collectionName,
                collectionAmount: data.collectionAmount,
                packagingCharge: packagingCharge,
                breakableCharge: breakableCharge,
                packagingName: packagingName
            };

            console.log(Obj);
            if (confirm('Are you sure?')) {

                let smsForChangedDR = ''
                if (data.changedDeliveryRange != null && data.previousDeliveryRange != Obj.paymentType) {
                    smsForChangedDR = 'আপনার সার্ভিস টাইপ পরিবর্তন হয়ে ' + data.previousDeliveryRange + ' থেকে ' + Obj.paymentType + '  হয়েছে|';
                }

                let url = apiBaseURL + 'QuickOrder/QuickOrderProcess';
                //let url = 'http://localhost:58676/QuickOrder/QuickOrderProcess';

                $http.post(url, Obj, { headers: { 'ContentType': 'application/json;charset=utf-8' } })
                    .then(function (response) {

                        if (response.data.didError) {
                            alert('Error occured');
                            return false;
                        }

                        alert('Order Place Successful');

                        let smsBody = 'আপনার(dt-paidorunppaid) পার্সেলটি(dt-code) কাস্টমারকে পাঠানোর কার্যক্রম শুরু হয়েছে। কাস্টমার নাম: dt-customerName dt-customerNumber। dt-cod\n';
                        $scope.SMStoMerchant(Obj, smsForChangedDR, smsBody,data);




                        //$scope.LoadQuickOrders($scope.fromDate, $scope.toDate);

                    }), function error(response) {
                        alert('Failed to Update Status');
                        return false;
                    };
            }
           

        }



        $scope.SMStoMerchant = (Obj, smsForChangedDR, sms, data) => {

            let paidorUnpaid = Obj.collectionAmount > 0 ? 'Unpaid Order' : 'Paid Order';
            let codAmount = Obj.collectionAmount > 0 ? 'Collection Amount: ' + Obj.collectionAmount : '';

            let smsBody = sms.replace('dt-paidorunppaid', paidorUnpaid).replace('dt-code', Obj.courierOrdersId).replace('dt-customerName', Obj.customerName).replace('dt-customerNumber', Obj.mobile).replace('dt-cod', codAmount) + smsForChangedDR;

            $scope.SendSMSGateway(smsBody, data.merchantMobile);
        }


        $scope.CheckError = (data, charge) => {
            let errorArr = [];

            if (data.courierOrdersId == '') {
                errorArr.push('CourierOrdersId');
            }
            if (data.customerName == '') {
                errorArr.push('customerName');
            }
            if (data.mobile == '') {
                errorArr.push('mobile');
            }
            if (data.address == '') {
                errorArr.push('address');
            }

            if (data.districtId == 0) {
                errorArr.push('District');
            }
            if (data.thanaId == 0) {
                errorArr.push('Thana');
            }
            //if (data.areaId == 0) {
            //    errorArr.push('Area');
            //}
            if (data.deliveryRangeId == 0) {
                errorArr.push('Service Type');
            }
            if (data.collectionName == '') {
                errorArr.push('Collection Name ');
            }
            if (data.actualPackagePrice == 0) {
                errorArr.push('Actual Package Price');
            }

            if (data.mobile.length < 11) {
                errorArr.push('Mobile Format is incorrect');
            }
            return errorArr;
        }


        $scope.GetBreakableCharge = () => {
            $http.get(apiBaseURL + 'Fetch/GetBreakableCharge', { headers: { 'ContentType': 'application/json;charset=utf-8' } })
                .then(function (response) {
                    $scope.Charges = response.data.model;
                });
        }


        $scope.GetRangeInfo = (districtId, thanaId, areaId, serviceType) => {

            let obj = {
                districtId: districtId,
                thanaId: thanaId,
                areaId: areaId,
                serviceType: serviceType
            };

            var xhr = new XMLHttpRequest();
            xhr.open('POST', apiBaseURL + 'Fetch/DeliveryChargeDetailsAreaWise', false);
            xhr.setRequestHeader("Content-Type", "application/json;charset=utf-8");
            xhr.onreadystatechange = function (response) { 
                console.log(response);
                var data = JSON.parse(response.currentTarget.response);
                $scope.allRangeInfo = data.model;

            }
            xhr.send(JSON.stringify(obj));
        }


        $scope.ChangeServiceType = (data) => {

            console.log(data.serviceType);
            if (data.districtId == data.collectAddressDistrictId) {
                data.serviceType = 'citytocity';
            }
            else {
                data.serviceType = 'alltoall'
            }

        }

        $scope.SendSMSGateway = (smsBody, merchantMobileNumber) => {


            let numberList = [];
            let toSms = "";

            numberList.push(merchantMobileNumber);
            toSms = "Merchant"

            let obj = {
                numbers: numberList,
                text: smsBody,
                type: 0,
                datacoding: 0
            };

            let objList = [];
            objList.push(obj);
            //console.log(objList);

            let url = bridgeBaseUrl + 'SmsComunication/SendSms';

            $http.post(url, objList, { headers: { 'ContentType': 'application/json;utf=charset-8', 'API_KEY': 'Ajkerdeal_~La?Rj73FcLm' } })
                .then(function (response) {
                    //console.log(response);
                    if (!response.data[0].Status) {
                        alert('SMS Sent unsuccessful.');
                        return false;
                    }
                    alert('SMS Sent Successfully to ' + toSms);
                    $scope.LoadQuickOrders($scope.fromDate, $scope.toDate);

                }), function error(response) {
                    alert('error Occured while sending sms');
                }

        }

        $scope.gotoDiv = (x) => {

            $location.hash(x);
            $anchorScroll();

        }

    });
</script>
